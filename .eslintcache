[{"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\index.js":"1","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\reportWebVitals.js":"3","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\App.js":"4","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\homePage\\homePage.js":"5","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\studentHome\\studentHome.js":"6","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\header\\header.js":"7","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\teacherHome\\teacherHome.js":"8","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\user.js":"9","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\authentication.js":"10","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\NoUserLandingPage\\noUserLandingPage.js":"11","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\constants.js":"12","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\classroom\\classroom.js":"13","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\createTest\\createTest.js":"14","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\classroom.js":"15","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\singleClassroom\\singleClassroom.js":"16","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\allQuestion\\allQuestion.js":"17","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\problem\\problem.js":"18"},{"size":816,"mtime":1637862266000,"results":"19","hashOfConfig":"20"},{"size":5064,"mtime":1637862266000,"results":"21","hashOfConfig":"20"},{"size":364,"mtime":1637862266000,"results":"22","hashOfConfig":"20"},{"size":328,"mtime":1637862266000,"results":"23","hashOfConfig":"20"},{"size":2307,"mtime":1637862266000,"results":"24","hashOfConfig":"20"},{"size":391,"mtime":1637862266000,"results":"25","hashOfConfig":"20"},{"size":12636,"mtime":1637862266000,"results":"26","hashOfConfig":"20"},{"size":442,"mtime":1637862266000,"results":"27","hashOfConfig":"20"},{"size":1096,"mtime":1637862266000,"results":"28","hashOfConfig":"20"},{"size":1496,"mtime":1637862266000,"results":"29","hashOfConfig":"20"},{"size":16644,"mtime":1637862266000,"results":"30","hashOfConfig":"20"},{"size":162,"mtime":1637862266000,"results":"31","hashOfConfig":"20"},{"size":11236,"mtime":1637862266000,"results":"32","hashOfConfig":"20"},{"size":9222,"mtime":1637862266000,"results":"33","hashOfConfig":"20"},{"size":3327,"mtime":1637862266000,"results":"34","hashOfConfig":"20"},{"size":12866,"mtime":1637862266000,"results":"35","hashOfConfig":"20"},{"size":1050,"mtime":1637862266000,"results":"36","hashOfConfig":"20"},{"size":2873,"mtime":1637862266000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f4ct40",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\index.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\reportWebVitals.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\App.js",["86"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport HomePage from \"./component/homePage/homePage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\homePage\\homePage.js",["87"],"import React from \"react\";\nimport \"./homePage.css\";\nimport Header from \"../header/header\";\nimport StudentHome from \"../studentHome/studentHome\";\nimport TeacherHome from \"../teacherHome/teacherHome\";\nimport shapesImage from \"../../assets/images/shapes.jpg\";\nimport NoUserLandingPage from \"../NoUserLandingPage/noUserLandingPage\";\nconst userService = require(\"../../service/user\");\nconst authentication = require(\"../../service/authentication\");\nexport default class HomePage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currUserData: null,\n    };\n  }\n\n  fetchUserData = async () => {\n    var res = await userService.fetchUserData();\n    if (res.status == 200) {\n      this.setState({\n        currUserData: res.userData,\n      });\n    } else {\n      this.setState(\n        {\n          currUserData: null,\n        },\n        () => localStorage.removeItem(\"takeMyTestAccessToken\")\n      );\n    }\n  };\n\n  logoutUser = () => {\n    this.setState(\n      {\n        currUserData: null,\n      },\n      () => localStorage.removeItem(\"takeMyTestAccessToken\")\n    );\n  };\n  render() {\n    if (!this.state.currUserData && authentication.getToken())\n      this.fetchUserData();\n    return (\n      <div className=\"home-page-container\">\n        <div\n          style={{\n            backgroundImage: `url(${shapesImage})`,\n            position: \"absolute\",\n            zIndex: -1,\n            width: \"100vw\",\n            height: \"100%\",\n            minHeight: \"100vh\",\n            opacity: 0.5,\n          }}\n        ></div>\n        <div className=\"header-container\">\n          <Header\n            fetchUserData={this.fetchUserData}\n            logoutUser={this.logoutUser}\n          />\n        </div>\n        <div className=\"user-home-container\">\n          {this.state.currUserData && this.state.currUserData.isStudent ? (\n            <StudentHome\n              fetchUserData={this.fetchUserData}\n              currUserData={this.state.currUserData}\n            />\n          ) : this.state.currUserData && this.state.currUserData.isTeacher ? (\n            <TeacherHome\n              fetchUserData={this.fetchUserData}\n              currUserData={this.state.currUserData}\n            />\n          ) : (\n            <NoUserLandingPage />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\studentHome\\studentHome.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\header\\header.js",["88","89","90","91","92","93"],"import React from \"react\";\nimport takeMyTestIcon from \"../../assets/images/takeMyTest.png\";\nconst authenticationService = require(\"../../service/authentication\");\nexport default class Header extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loginEmail: \"\",\n      loginPassword: \"\",\n      registerEmail: \"\",\n      registerName: \"\",\n      registerPassword: \"\",\n      registerProfession: \"\",\n      loggedIn: localStorage.getItem(\"takeMyTestAccessToken\") != null,\n      isError: false,\n      errorMsg: \"\",\n      isSuccess: false,\n      successMsg: \"\",\n    };\n  }\n\n  handleStateChange = (e) => {\n    var name = e.target.name;\n    var value = e.target.value;\n    this.setState((prevState) => {\n      var curr = { ...prevState };\n      curr[name] = value;\n      return curr;\n    });\n  };\n\n  loginUser = async (e) => {\n    e.preventDefault();\n    var loginUserData = {\n      email: this.state.loginEmail,\n      password: this.state.loginPassword,\n    };\n    const res = await authenticationService.handleLogin(loginUserData);\n    if (res.status == 200) {\n      localStorage.setItem(\"takeMyTestAccessToken\", res.token);\n      this.setState(\n        {\n          loggedIn: true,\n          isSuccess: true,\n          isError: false,\n          successMsg: res.message,\n          errorMsg: \"\",\n        },\n        () => {\n          this.props.fetchUserData();\n        }\n      );\n    } else {\n      localStorage.removeItem(\"takeMyTestAccessToken\");\n      this.setState({\n        loggedIn: false,\n        isSuccess: false,\n        isError: true,\n        successMsg: \"\",\n        errorMsg: res.message,\n      });\n    }\n  };\n\n  registerUser = async (e) => {\n    e.preventDefault();\n    var registerUserData = {\n      email: this.state.registerEmail,\n      password: this.state.registerPassword,\n      name: this.state.registerName,\n      profession: this.state.registerProfession,\n    };\n    const res = await authenticationService.handleRegister(registerUserData);\n    if (res.status == 200) {\n      localStorage.setItem(\"takeMyTestAccessToken\", res.token);\n      this.setState(\n        {\n          loggedIn: true,\n          isSuccess: true,\n          isError: false,\n          successMsg: res.message,\n          errorMsg: \"\",\n        },\n        () => this.props.fetchUserData()\n      );\n    } else {\n      localStorage.removeItem(\"takeMyTestAccessToken\");\n      this.setState({\n        loggedIn: false,\n        isSuccess: false,\n        isError: true,\n        successMsg: \"\",\n        errorMsg: res.message,\n      });\n    }\n  };\n\n  logout = () => {\n    localStorage.removeItem(\"takeMyTestAccessToken\");\n    this.setState(\n      {\n        loggedIn: false,\n        isError: false,\n        isSuccess: false,\n        errorMsg: \"\",\n        successMsg: \"\",\n      },\n      () => this.props.fetchUserData()\n    );\n  };\n\n  render() {\n    return (\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <a class=\"navbar-brand\" href=\"#\">\n            <img src={takeMyTestIcon} alt=\"\" width=\"30\" height=\"24\" />\n          </a>\n          <a class=\"navbar-brand\" href=\"#\">\n            TakeMyTest\n          </a>\n          <button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span class=\"navbar-toggler-icon\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li class=\"nav-item\">\n                <a class=\"nav-link active\" aria-current=\"page\" href=\"#\"></a>\n              </li>\n            </ul>\n            <form class=\"d-flex\">\n              {!this.state.loggedIn ? (\n                <div>\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-success\"\n                    data-bs-toggle=\"modal\"\n                    data-bs-target=\"#loginModal\"\n                  >\n                    Login\n                  </button>\n                  &nbsp;\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-primary\"\n                    data-bs-toggle=\"modal\"\n                    data-bs-target=\"#registerModal\"\n                  >\n                    Register\n                  </button>\n                </div>\n              ) : (\n                <div>\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-danger\"\n                    onClick={() => this.logout()}\n                  >\n                    Logout\n                  </button>\n                </div>\n              )}\n            </form>\n          </div>\n        </div>\n\n        <div\n          class=\"modal fade\"\n          id=\"loginModal\"\n          tabindex=\"-1\"\n          aria-labelledby=\"loginModalLabel\"\n          aria-hidden=\"true\"\n        >\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                  Login\n                </h5>\n                <button\n                  type=\"button\"\n                  class=\"btn-close\"\n                  data-bs-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                  onClick={() =>\n                    this.setState({\n                      isError: false,\n                      isSuccess: false,\n                      errorMsg: \"\",\n                      successMsg: \"\",\n                      loginEmail: \"\",\n                      loginPassword: \"\",\n                    })\n                  }\n                ></button>\n              </div>\n              <div class=\"modal-body\">\n                <form style={{ textAlign: \"left\" }}>\n                  <div class=\"mb-3\">\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      class=\"form-control\"\n                      id=\"exampleInputEmail1\"\n                      name=\"loginEmail\"\n                      value={this.state.loginEmail}\n                      onChange={(e) => this.handleStateChange(e)}\n                      aria-describedby=\"emailHelp\"\n                    />\n                  </div>\n                  <div class=\"mb-3\">\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">\n                      Password\n                    </label>\n                    <input\n                      type=\"password\"\n                      class=\"form-control\"\n                      id=\"exampleInputPassword1\"\n                      name=\"loginPassword\"\n                      value={this.state.loginPassword}\n                      onChange={(e) => this.handleStateChange(e)}\n                    />\n                  </div>\n\n                  <button\n                    onClick={(e) => this.loginUser(e)}\n                    class=\"btn btn-primary\"\n                  >\n                    Login\n                  </button>\n                </form>\n              </div>\n              <div className=\"modal-footer\" style={{ display: \"block\" }}>\n                {this.state.isError && (\n                  <div class=\"alert alert-danger\" role=\"alert\">\n                    {this.state.errorMsg}\n                  </div>\n                )}\n                {this.state.isSuccess && (\n                  <div class=\"alert alert-success\" role=\"alert\">\n                    {this.state.successMsg}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"modal fade\"\n          id=\"registerModal\"\n          tabindex=\"-1\"\n          aria-labelledby=\"loginModalLabel\"\n          aria-hidden=\"true\"\n        >\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                  Register\n                </h5>\n                <button\n                  type=\"button\"\n                  class=\"btn-close\"\n                  data-bs-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                  onClick={() =>\n                    this.setState({\n                      isError: false,\n                      isSuccess: false,\n                      errorMsg: \"\",\n                      successMsg: \"\",\n                      registerEmail: \"\",\n                      registerPassword: \"\",\n                      registerName: \"\",\n                      registerProfession: \"\",\n                    })\n                  }\n                ></button>\n              </div>\n              <div class=\"modal-body\">\n                <form style={{ textAlign: \"left\" }}>\n                  <div class=\"mb-3\">\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      class=\"form-control\"\n                      id=\"exampleInputEmail1\"\n                      aria-describedby=\"emailHelp\"\n                      name=\"registerEmail\"\n                      value={this.state.registerEmail}\n                      onChange={(e) => this.handleStateChange(e)}\n                    />\n                  </div>\n                  <div class=\"mb-3\">\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">\n                      Password\n                    </label>\n                    <input\n                      type=\"password\"\n                      class=\"form-control\"\n                      id=\"exampleInputPassword1\"\n                      name=\"registerPassword\"\n                      value={this.state.registerPassword}\n                      onChange={(e) => this.handleStateChange(e)}\n                    />\n                  </div>\n\n                  <div class=\"mb-3\">\n                    <label for=\"exampleInputPassword1\" class=\"form-label\">\n                      Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"exampleInputPassword1\"\n                      name=\"registerName\"\n                      value={this.state.registerName}\n                      onChange={(e) => this.handleStateChange(e)}\n                    />\n                  </div>\n\n                  <div class=\"form-check\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"radio\"\n                      name=\"profession\"\n                      id=\"profession-student\"\n                      onClick={() =>\n                        this.setState({ registerProfession: \"student\" })\n                      }\n                    />\n                    <label class=\"form-check-label\" for=\"profession-student\">\n                      I'm student\n                    </label>\n                  </div>\n                  <div class=\"form-check\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"radio\"\n                      name=\"profession\"\n                      id=\"profession-teacher\"\n                      onClick={() =>\n                        this.setState({ registerProfession: \"teacher\" })\n                      }\n                    />\n                    <label class=\"form-check-label\" for=\"profession-teacher\">\n                      I'm teacher\n                    </label>\n                  </div>\n                  <br />\n                  <br />\n                  <button\n                    onClick={(e) => this.registerUser(e)}\n                    class=\"btn btn-primary\"\n                  >\n                    Register\n                  </button>\n                </form>\n              </div>\n              <div className=\"modal-footer\" style={{ display: \"block\" }}>\n                {this.state.isError && (\n                  <div class=\"alert alert-danger\" role=\"alert\">\n                    {this.state.errorMsg}\n                  </div>\n                )}\n                {this.state.isSuccess && (\n                  <div class=\"alert alert-success\" role=\"alert\">\n                    {this.state.successMsg}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\teacherHome\\teacherHome.js",["94"],"import React from \"react\";\nimport \"./teacherHome.css\";\nimport CreateTest from \"../createTest/createTest\";\nimport Classroom from \"../classroom/classroom\";\nexport default class TeacherHome extends React.Component {\n  render() {\n    return (\n      <div className=\"teacher-home-container\">\n        <Classroom\n          fetchUserData={this.props.fetchUserData}\n          currUserData={this.props.currUserData}\n        />\n      </div>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\user.js",["95","96"],"const constant = require(\"../constants\");\nconst authenticationService = require(\"./authentication\");\n\nfunction processResponse(res) {\n  // check if user is authenticated/authorized or not\n  if (res.status == 401) {\n    // user not authenticated\n    // remove access token from localStorage if present\n    if (localStorage.getItem(\"takeMyTestAccessToken\")) {\n      localStorage.removeItem(\"takeMyTestAccessToken\");\n    }\n    return {\n      status: 401,\n      message: \"User not authenticated!\",\n    };\n  } else if (res.status == 403) {\n    // user not authorized\n    return {\n      status: 403,\n      message: \"User not authorized\",\n    };\n  } else {\n    // user is authenticated as well as authorized\n    return res.json();\n  }\n}\n\n// function to fetch user data\nasync function fetchUserData() {\n  const res = await fetch(`${constant.BACKEND_URL}/fetchUserData`, {\n    method: \"GET\",\n    headers: {\n      authorization: `JWT ${authenticationService.getToken()}`,\n      \"content-type\": \"application/json\",\n    },\n  }).then((res) => processResponse(res));\n  return res;\n}\n\nexport { fetchUserData };\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\authentication.js",["97","98"],"const constant = require(\"../constants\");\n\nfunction processResponse(res) {\n  // check if user is authenticated/authorized or not\n  if (res.status == 401) {\n    // user not authenticated\n    // remove access token from localStorage if present\n    if (localStorage.getItem(\"takeMyTestAccessToken\")) {\n      localStorage.removeItem(\"takeMyTestAccessToken\");\n    }\n    return {\n      status: 401,\n      message: \"User not authenticated!\",\n    };\n  } else if (res.status == 403) {\n    // user not authorized\n    return {\n      status: 403,\n      message: \"User not authorized\",\n    };\n  } else {\n    // user is authenticated as well as authorized\n    return res.json();\n  }\n}\n\nfunction getToken() {\n  return localStorage.getItem(\"takeMyTestAccessToken\");\n}\n\n// function to login user with email and password\nasync function handleLogin(userData) {\n  const res = await fetch(`${constant.BACKEND_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      userData: userData,\n    }),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\n// function to register user\nasync function handleRegister(userData) {\n  const res = await fetch(`${constant.BACKEND_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      userData: userData,\n    }),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\nexport { getToken, handleLogin, handleRegister };\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\NoUserLandingPage\\noUserLandingPage.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\constants.js",["99"],"const MODE = \"dev\";\nconst BACKEND_URL =\n  MODE == \"prod\"\n    ? \"https://takemytest-backend.herokuapp.com\"\n    : \"http://localhost:8000\";\n\nexport { BACKEND_URL };\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\classroom\\classroom.js",["100","101"],"import React from \"react\";\nimport SingleClassroom from \"../singleClassroom/singleClassroom\";\nimport \"./classroom.css\";\nconst classroomService = require(\"../../service/classroom\");\n\nexport default class Classroom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currUserData: props.currUserData,\n      createClassName: \"\",\n      joinClassId: \"\",\n      isError: false,\n      errorMsg: \"\",\n      isSuccess: false,\n      successMsg: \"\",\n      classroomActive: null,\n    };\n  }\n\n  handleStateChange = (e) => {\n    var name = e.target.name;\n    var value = e.target.value;\n    this.setState((prevState) => {\n      var curr = { ...prevState };\n      curr[name] = value;\n      return curr;\n    });\n  };\n\n  static getDerivedStateFromProps(props) {\n    return { currUserData: props.currUserData };\n  }\n\n  createClassroom = async (e) => {\n    e.preventDefault();\n    var classData = {\n      name: this.state.createClassName,\n    };\n    const res = await classroomService.createClassRoom(classData);\n    if (res.status == 200) {\n      this.setState(\n        {\n          isSuccess: true,\n          successMsg: res.message,\n          isError: false,\n          errorMsg: \"\",\n        },\n        () => this.props.fetchUserData()\n      );\n    } else {\n      this.setState({\n        isSuccess: false,\n        successMsg: \"\",\n        isError: true,\n        errorMsg: res.message,\n      });\n    }\n  };\n\n  joinClassroom = async (e) => {\n    e.preventDefault();\n    var classData = {\n      id: this.state.joinClassId,\n    };\n    const res = await classroomService.joinClassRoom(classData);\n    if (res.status == 200) {\n      this.setState(\n        {\n          isSuccess: true,\n          successMsg: res.message,\n          isError: false,\n          errorMsg: \"\",\n        },\n        () => this.props.fetchUserData()\n      );\n    } else {\n      this.setState({\n        isSuccess: false,\n        successMsg: \"\",\n        isError: true,\n        errorMsg: res.message,\n      });\n    }\n  };\n\n  activateClassroom = (value) => {\n    this.setState({\n      classroomActive: value,\n    });\n  };\n\n  deactivateClassroom = () => {\n    this.setState({\n      classroomActive: null,\n    });\n  };\n\n  render() {\n    return this.state.currUserData ? (\n      this.state.currUserData.isStudent ? (\n        <div className=\"student-classroom-container\">\n          <div className=\"student-name-container\">\n            <button\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#joinClassroomModal\"\n              className=\"btn btn-success\"\n            >\n              Join classroom\n            </button>\n            <div>Hello {this.state.currUserData.name}</div>\n          </div>\n          <div style={{ padding: \"0px 30px\" }}>\n            <h3\n              style={{ fontFamily: \"Segoe UI\", fontWeight: 300, fontSize: 35 }}\n            >\n              My Classrooms\n            </h3>\n            <hr />\n          </div>\n\n          <div className=\"classrooms\">\n            {this.state.classroomActive && (\n              <SingleClassroom\n                classroom={this.state.classroomActive}\n                currUserData={this.state.currUserData}\n                deactivateClassroom={this.deactivateClassroom}\n              />\n            )}\n            {this.state.currUserData &&\n              this.state.currUserData.enrolledClassroomIdName &&\n              !this.state.classroomActive &&\n              this.state.currUserData.enrolledClassroomIdName.map(\n                (value, index) => {\n                  return (\n                    <div className={`single-classroom theme-${value.theme}`}>\n                      <h4>{value.name}</h4>\n                      <hr />\n                      <p>Class Code : {value.id}</p>\n                      <div className=\"enter-classroom-button-container\">\n                        <button\n                          className=\"btn btn-primary\"\n                          onClick={() => this.activateClassroom(value)}\n                        >\n                          Enter\n                        </button>\n                      </div>\n                    </div>\n                  );\n                }\n              )}\n          </div>\n\n          <div\n            class=\"modal fade\"\n            id=\"joinClassroomModal\"\n            tabindex=\"-1\"\n            aria-labelledby=\"createClassroomLabel\"\n            aria-hidden=\"true\"\n          >\n            <div class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                    Join Classroom\n                  </h5>\n                  <button\n                    type=\"button\"\n                    class=\"btn-close\"\n                    data-bs-dismiss=\"modal\"\n                    aria-label=\"Close\"\n                    onClick={() =>\n                      this.setState({\n                        isError: false,\n                        isSuccess: false,\n                        errorMsg: \"\",\n                        successMsg: \"\",\n                        joinClassId: \"\",\n                      })\n                    }\n                  ></button>\n                </div>\n                <div class=\"modal-body\">\n                  <form style={{ textAlign: \"left\" }}>\n                    <div class=\"mb-3\">\n                      <label for=\"exampleInputEmail1\" class=\"form-label\">\n                        Class Id\n                      </label>\n                      <input\n                        class=\"form-control\"\n                        id=\"exampleInputEmail1\"\n                        name=\"joinClassId\"\n                        value={this.state.joinClassId}\n                        onChange={(e) => this.handleStateChange(e)}\n                        aria-describedby=\"emailHelp\"\n                      />\n                    </div>\n\n                    <button\n                      onClick={(e) => this.joinClassroom(e)}\n                      class=\"btn btn-primary\"\n                    >\n                      Join\n                    </button>\n                  </form>\n                </div>\n                <div className=\"modal-footer\" style={{ display: \"block\" }}>\n                  {this.state.isError && (\n                    <div class=\"alert alert-danger\" role=\"alert\">\n                      {this.state.errorMsg}\n                    </div>\n                  )}\n                  {this.state.isSuccess && (\n                    <div class=\"alert alert-success\" role=\"alert\">\n                      {this.state.successMsg}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"teacher-classroom-container\">\n          <div className=\"student-name-container\">\n            <button\n              className=\"btn btn-success\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#createClassroomModal\"\n            >\n              New classroom\n            </button>\n            <div>Hello {this.state.currUserData.name}</div>\n          </div>\n          <div style={{ padding: \"0px 30px\" }}>\n            <h3\n              style={{ fontFamily: \"Segoe UI\", fontWeight: 300, fontSize: 35 }}\n            >\n              My Classrooms\n            </h3>\n            <hr />\n          </div>\n          <div className=\"classrooms\">\n            {this.state.classroomActive && (\n              <SingleClassroom\n                fetchUserData={this.props.fetchUserData}\n                classroom={this.state.classroomActive}\n                currUserData={this.state.currUserData}\n                deactivateClassroom={this.deactivateClassroom}\n              />\n            )}\n            {this.state.currUserData &&\n              this.state.currUserData.createdClassroomIdName &&\n              !this.state.classroomActive &&\n              this.state.currUserData.createdClassroomIdName.map(\n                (value, index) => {\n                  return (\n                    <div className={`single-classroom theme-${value.theme}`}>\n                      <h4>{value.name}</h4>\n                      <hr />\n                      <p>Code : {value.id}</p>\n                      <div className=\"enter-classroom-button-container\">\n                        <button\n                          className=\"btn btn-primary\"\n                          onClick={() => this.activateClassroom(value)}\n                        >\n                          Enter\n                        </button>\n                      </div>\n                    </div>\n                  );\n                }\n              )}\n          </div>\n\n          <div\n            class=\"modal fade\"\n            id=\"createClassroomModal\"\n            tabindex=\"-1\"\n            aria-labelledby=\"createClassroomLabel\"\n            aria-hidden=\"true\"\n          >\n            <div class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                    Create Classroom\n                  </h5>\n                  <button\n                    type=\"button\"\n                    class=\"btn-close\"\n                    data-bs-dismiss=\"modal\"\n                    aria-label=\"Close\"\n                    onClick={() =>\n                      this.setState({\n                        isError: false,\n                        isSuccess: false,\n                        errorMsg: \"\",\n                        successMsg: \"\",\n                        createClassName: \"\",\n                      })\n                    }\n                  ></button>\n                </div>\n                <div class=\"modal-body\">\n                  <form style={{ textAlign: \"left\" }}>\n                    <div class=\"mb-3\">\n                      <label for=\"exampleInputEmail1\" class=\"form-label\">\n                        Class name\n                      </label>\n                      <input\n                        class=\"form-control\"\n                        id=\"exampleInputEmail1\"\n                        name=\"createClassName\"\n                        value={this.state.createClassName}\n                        onChange={(e) => this.handleStateChange(e)}\n                        aria-describedby=\"emailHelp\"\n                      />\n                    </div>\n\n                    <button\n                      onClick={(e) => this.createClassroom(e)}\n                      class=\"btn btn-primary\"\n                    >\n                      Create\n                    </button>\n                  </form>\n                </div>\n                <div className=\"modal-footer\" style={{ display: \"block\" }}>\n                  {this.state.isError && (\n                    <div class=\"alert alert-danger\" role=\"alert\">\n                      {this.state.errorMsg}\n                    </div>\n                  )}\n                  {this.state.isSuccess && (\n                    <div class=\"alert alert-success\" role=\"alert\">\n                      {this.state.successMsg}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    ) : (\n      <></>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\createTest\\createTest.js",["102","103"],"import React from \"react\";\nimport \"./createTest.css\";\nimport TextField from \"@mui/material/TextField\";\nconst classroomService = require(\"../../service/classroom\");\nexport default class CreateTest extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      testDurationInMins: null,\n      testStartsAt: null,\n      testName: \"\",\n    };\n  }\n  addQuestion = () => {\n    let question = {\n      statement: \"\",\n      options: {\n        a: \"\",\n        b: \"\",\n        c: \"\",\n        d: \"\",\n      },\n      answer: \"\",\n    };\n    let questions = this.state.questions.concat([question]);\n    this.setState({\n      questions: questions,\n    });\n  };\n  handleQuestionStatementChange = (e, questionIndex) => {\n    e.preventDefault();\n    let questions = [...this.state.questions];\n    questions[questionIndex].statement = e.target.value;\n    this.setState({\n      questions: questions,\n    });\n  };\n\n  handleQuestionOptionChange = (e, questionIndex, optionType) => {\n    e.preventDefault();\n    let questions = [...this.state.questions];\n    questions[questionIndex].options[optionType] = e.target.value;\n    this.setState({\n      questions: questions,\n    });\n  };\n  handleQuestionAnswerChange = (e, questionIndex) => {\n    let questions = [...this.state.questions];\n    questions[questionIndex].answer = e.target.value;\n    this.setState({\n      questions: questions,\n    });\n  };\n  handleStateChange = (e) => {\n    var name = e.target.name;\n    var value = e.target.value;\n    this.setState((prevState) => {\n      var curr = { ...prevState };\n      curr[name] = value;\n      return curr;\n    });\n  };\n  createTest = async () => {\n    const res = await classroomService.createTest({\n      test: {\n        questions: this.state.questions,\n        duration: this.state.testDurationInMins,\n        startTime: this.state.testStartsAt,\n        name: this.state.testName,\n      },\n      classroom: this.props.classroom.id,\n    });\n    if (res.status == 200) {\n      alert(\"Test added successfully\");\n      this.props.fetchUserData();\n      this.props.closeCreateTest();\n    } else {\n      alert(\"Test not added\");\n    }\n  };\n  render() {\n    return (\n      <div className=\"new-test-container\">\n        <div\n          style={{ width: \"100%\", padding: \"0px 0px 20px 0px\" }}\n          class=\"form-check form-check-inline\"\n        >\n          <label class=\"form-check-label\" for=\"testDurationInMins\">\n            Test Name\n          </label>\n          <input\n            class=\"form-control\"\n            type=\"text\"\n            name=\"testName\"\n            id=\"testName\"\n            value={this.state.testName}\n            onChange={(e) => this.handleStateChange(e)}\n          />\n        </div>\n        <div className=\"test-duration-start-date\">\n          <div class=\"form-check form-check-inline\">\n            <label class=\"form-check-label\" for=\"testDurationInMins\">\n              Test Duration ( mins )\n            </label>\n            <input\n              class=\"form-control\"\n              type=\"text\"\n              name=\"testDurationInMins\"\n              id=\"testDurationInMins\"\n              value={this.state.testDurationInMins}\n              onChange={(e) => this.handleStateChange(e)}\n            />\n          </div>\n          <div class=\"form-check form-check-inline\">\n            <TextField\n              id=\"datetime-local\"\n              label=\"Test starts at\"\n              type=\"datetime-local\"\n              sx={{ width: 250 }}\n              name=\"testStartsAt\"\n              value={this.state.testStartsAt}\n              onChange={(e) => this.handleStateChange(e)}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </div>\n        </div>\n\n        {this.state.questions.map((value, index) => {\n          return (\n            <div className=\"question-container\">\n              <hr />\n              <div className=\"question-statement-container\">\n                <label for={`question${index + 1}`} class=\"form-label\">\n                  <strong>Question {index + 1}</strong>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id={`question${index + 1}`}\n                  onChange={(e) => this.handleQuestionStatementChange(e, index)}\n                  value={value.statement}\n                />\n              </div>\n              <div className=\"question-options-container\">\n                {/* option a */}\n                <label for={`question${index + 1}`} class=\"form-label\">\n                  <strong>Option A</strong>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id={`question${index + 1}`}\n                  value={value.options.a}\n                  onChange={(e) =>\n                    this.handleQuestionOptionChange(e, index, \"a\")\n                  }\n                />\n                {/* option b */}\n                <label for={`question${index + 1}`} class=\"form-label\">\n                  <strong>Option B</strong>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id={`question${index + 1}`}\n                  value={value.options.b}\n                  onChange={(e) =>\n                    this.handleQuestionOptionChange(e, index, \"b\")\n                  }\n                />\n                {/* option c */}\n                <label for={`question${index + 1}`} class=\"form-label\">\n                  <strong>Option C</strong>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id={`question${index + 1}`}\n                  value={value.options.c}\n                  onChange={(e) =>\n                    this.handleQuestionOptionChange(e, index, \"c\")\n                  }\n                />\n                {/* option D */}\n                <label for={`question${index + 1}`} class=\"form-label\">\n                  <strong>Option D</strong>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id={`question${index + 1}`}\n                  value={value.options.d}\n                  onChange={(e) =>\n                    this.handleQuestionOptionChange(e, index, \"d\")\n                  }\n                />\n              </div>\n              <div className=\"question-answer-container\">\n                <label class=\"form-label\">\n                  <strong>Answer</strong>\n                </label>\n                <div class=\"form-check form-check-inline\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"radio\"\n                    name={`option-${index + 1}`}\n                    id=\"inlineRadio1\"\n                    value=\"a\"\n                    onChange={(e) => this.handleQuestionAnswerChange(e, index)}\n                  />\n                  <label class=\"form-check-label\" for=\"inlineRadio1\">\n                    A\n                  </label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"radio\"\n                    name={`option-${index + 1}`}\n                    id=\"inlineRadio2\"\n                    value=\"b\"\n                    onChange={(e) => this.handleQuestionAnswerChange(e, index)}\n                  />\n                  <label class=\"form-check-label\" for=\"inlineRadio2\">\n                    B\n                  </label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"radio\"\n                    name={`option-${index + 1}`}\n                    id=\"inlineRadio2\"\n                    value=\"c\"\n                    onChange={(e) => this.handleQuestionAnswerChange(e, index)}\n                  />\n                  <label class=\"form-check-label\" for=\"inlineRadio2\">\n                    C\n                  </label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"radio\"\n                    name={`option-${index + 1}`}\n                    id=\"inlineRadio2\"\n                    value=\"d\"\n                    onChange={(e) => this.handleQuestionAnswerChange(e, index)}\n                  />\n                  <label class=\"form-check-label\" for=\"inlineRadio2\">\n                    D\n                  </label>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n\n        <div className=\"create-test-action-container\">\n          <button className=\"btn btn-danger\" onClick={() => this.addQuestion()}>\n            Add question\n          </button>\n\n          <button\n            className=\"btn btn-success\"\n            disabled={this.state.questions.length == 0 ? true : false}\n            onClick={() => this.createTest()}\n          >\n            Save Test\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\service\\classroom.js",["104","105"],"const constant = require(\"../constants\");\nconst authenticationService = require(\"./authentication\");\n\nfunction processResponse(res) {\n  // check if user is authenticated/authorized or not\n  if (res.status == 401) {\n    // user not authenticated\n    // remove access token from localStorage if present\n    if (localStorage.getItem(\"takeMyTestAccessToken\")) {\n      localStorage.removeItem(\"takeMyTestAccessToken\");\n    }\n    return {\n      status: 401,\n      message: \"User not authenticated!\",\n    };\n  } else if (res.status == 403) {\n    // user not authorized\n    return {\n      status: 403,\n      message: \"User not authorized\",\n    };\n  } else {\n    // user is authenticated as well as authorized\n    return res.json();\n  }\n}\n\n// function to create classroom\nasync function createClassRoom(classroomData) {\n  const res = await fetch(`${constant.BACKEND_URL}/createClassroom`, {\n    method: \"POST\",\n    headers: {\n      authorization: `JWT ${authenticationService.getToken()}`,\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      classroomData: classroomData,\n    }),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\n// function to join classroom\nasync function joinClassRoom(classroomData) {\n  const res = await fetch(`${constant.BACKEND_URL}/joinClassroom`, {\n    method: \"POST\",\n    headers: {\n      authorization: `JWT ${authenticationService.getToken()}`,\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      classroomData: classroomData,\n    }),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\n// function to create test\nasync function createTest(testData) {\n  const res = await fetch(`${constant.BACKEND_URL}/createTest`, {\n    method: \"POST\",\n    headers: {\n      authorization: `JWT ${authenticationService.getToken()}`,\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify(testData),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\n// function to fetch all test for students & teachers\nasync function fetchAllTestInClassroom(classroomId) {\n  const res = await fetch(\n    `${constant.BACKEND_URL}/fetchAllTestInClassroom?classroomId=${classroomId}`,\n    {\n      method: \"GET\",\n      headers: {\n        authorization: `JWT ${authenticationService.getToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    }\n  ).then((res) => processResponse(res));\n  return res;\n}\n\n// function to fetch particular test\nasync function fetchTest(testId) {\n  const res = await fetch(\n    `${constant.BACKEND_URL}/fetchTest?testId=${testId}`,\n    {\n      method: \"GET\",\n      headers: {\n        authorization: `JWT ${authenticationService.getToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    }\n  ).then((res) => processResponse(res));\n  return res;\n}\n\n// function to submit test\nasync function submitTest(testId, answers) {\n  const res = await fetch(`${constant.BACKEND_URL}/submitTest`, {\n    method: \"POST\",\n    headers: {\n      authorization: `JWT ${authenticationService.getToken()}`,\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      testId: testId,\n      answers: answers,\n    }),\n  }).then((res) => processResponse(res));\n  return res;\n}\n\nexport {\n  createClassRoom,\n  joinClassRoom,\n  createTest,\n  fetchAllTestInClassroom,\n  fetchTest,\n  submitTest,\n};\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\singleClassroom\\singleClassroom.js",["106","107","108","109","110","111","112","113"],"import React from \"react\";\nimport \"./singleClassroom.css\";\nimport AllQuestion from \"../allQuestion/allQuestion\";\nimport Problem from \"../problem/problem\";\nimport CreateTest from \"../createTest/createTest\";\nimport { BACKEND_URL } from \"../../constants\";\nconst classroomService = require(\"../../service/classroom\");\nconst moment = require(\"moment\");\nexport default class SingleClassroom extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: {},\n      reviewedSavedQuestion: {},\n      currentQuestion: {},\n      currentQuestionNumber: null,\n      answers: {},\n      createTest: false,\n      allTestStudent: null,\n      allTestTeacher: null,\n      isTestAvail: false,\n      test: null,\n      testResult: null,\n      testResultName: \"\",\n    };\n  }\n  changeQuestion = (newQuestion) => {\n    this.setState({\n      currentQuestion: newQuestion,\n    });\n  };\n  reviewQuestion = (questionId, ans) => {\n    this.setState(\n      (prevState) => {\n        let curr = { ...this.state.reviewedSavedQuestion };\n        curr[questionId].reviewed = true;\n        curr[questionId].saved = false;\n        return curr;\n      },\n      () => {\n        let curr = this.state.answers;\n        curr[questionId] = ans;\n        this.setState({\n          answers: curr,\n        });\n      }\n    );\n  };\n  saveQuestion = (questionId, ans) => {\n    this.setState(\n      (prevState) => {\n        var curr = { ...this.state.reviewedSavedQuestion };\n        curr[questionId].reviewed = false;\n        curr[questionId].saved = true;\n        return curr;\n      },\n      () => {\n        let curr = this.state.answers;\n        curr[questionId] = ans;\n        this.setState({\n          answers: curr,\n        });\n      }\n    );\n  };\n\n  fetchAllTestStudent = async () => {\n    const res = await classroomService.fetchAllTestInClassroom(\n      this.props.classroom.id\n    );\n\n    if (res.status == 200) {\n      this.setState({\n        allTestStudent: res.test,\n      });\n    } else {\n      this.setState({\n        allTestStudent: true,\n      });\n    }\n  };\n\n  fetchAllTestTeacher = async () => {\n    const res = await classroomService.fetchAllTestInClassroom(\n      this.props.classroom.id\n    );\n\n    if (res.status == 200) {\n      this.setState({\n        allTestTeacher: res.test,\n      });\n    } else {\n      this.setState({\n        allTestTeacher: true,\n      });\n    }\n  };\n\n  fetchTestAndStart = async (testId) => {\n    const res = await classroomService.fetchTest(testId);\n    if (res.status == 200 && res.test) {\n      let reviewedSavedQuestion = {};\n      let answers = {};\n      Object.keys(res.test.questions).map((value, index) => {\n        reviewedSavedQuestion[value] = {\n          reviewed: false,\n          saved: false,\n        };\n        answers[value] = \"\";\n      });\n      this.setState({\n        isTestAvail: true,\n        test: res.test,\n        questions: res.test.questions,\n        currentQuestion: 0,\n        reviewedSavedQuestion: reviewedSavedQuestion,\n        answers: answers,\n      });\n    } else {\n      this.setState({\n        isTestAvail: true,\n      });\n    }\n  };\n  submitTest = async () => {\n    var res = await classroomService.submitTest(\n      this.state.test.id,\n      this.state.answers\n    );\n    if (res.status == 200)\n      alert(`Your score is : ${res.score}. Click OK to close test`);\n    this.setState({\n      isTestAvail: false,\n      test: null,\n      questions: {},\n      currentQuestion: null,\n      reviewedSavedQuestion: {},\n      answers: {},\n      allTestStudent: null,\n    });\n  };\n\n  createNewTest = () => {\n    this.setState({\n      createTest: true,\n    });\n  };\n\n  closeCreateTest = () => {\n    this.setState({\n      createTest: false,\n      allTestTeacher: null,\n    });\n  };\n\n  viewTestResults = (id) => {\n    Object.keys(this.state.allTestTeacher).map((value, index) => {\n      if (this.state.allTestTeacher[value].id == id) {\n        this.setState({\n          testResult: this.state.allTestTeacher[value].results,\n          testResultName: this.state.allTestTeacher[value].name,\n        });\n      }\n    });\n  };\n\n  render() {\n    if (this.props.currUserData.isStudent && this.state.allTestStudent == null)\n      this.fetchAllTestStudent();\n    if (this.props.currUserData.isTeacher && this.state.allTestTeacher == null)\n      this.fetchAllTestTeacher();\n    return (\n      <div className=\"single-classroom-container\">\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <h3>{this.props.classroom.name}</h3>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => this.props.deactivateClassroom()}\n          >\n            Close Classroom\n          </button>\n        </div>\n        {this.props.currUserData.isStudent ? (\n          <div>\n            {!this.state.isTestAvail ? (\n              <div className=\"test-strip-container\">\n                {this.state.allTestStudent &&\n                  this.state.allTestStudent.map((value, index) => {\n                    return (\n                      <div\n                        className={`test-strip test-strip-${this.props.classroom.theme}`}\n                      >\n                        <p>{value.name}</p>\n                        {Object.keys(value.results).includes(\n                          this.props.currUserData.email.split(\".\")[0]\n                        ) ? (\n                          <button className=\"btn btn-light\" disabled>\n                            Score :\n                            {\" \" +\n                              value.results[\n                                this.props.currUserData.email.split(\".\")[0]\n                              ]}\n                          </button>\n                        ) : (\n                          <button\n                            className=\"btn btn-success\"\n                            disabled={moment(new Date(value.startTime)).isAfter(\n                              moment(Date.now())\n                            )}\n                            onClick={() => this.fetchTestAndStart(value.id)}\n                          >\n                            Start\n                          </button>\n                        )}\n                      </div>\n                    );\n                  })}\n              </div>\n            ) : (\n              <div>\n                <div className=\"test-container\">\n                  <div className=\"all-question-container\">\n                    <div className=\"all-question-header\">\n                      {this.state.test.name}\n                    </div>\n                    <hr />\n                    <AllQuestion\n                      changeQuestion={this.changeQuestion}\n                      questions={this.state.questions}\n                      reviewedSavedQuestion={this.state.reviewedSavedQuestion}\n                    />\n                  </div>\n                  <div className=\"problem-container\">\n                    <Problem\n                      questions={this.state.questions}\n                      currentQuestion={this.state.currentQuestion}\n                      reviewQuestion={this.reviewQuestion}\n                      saveQuestion={this.saveQuestion}\n                      answers={this.state.answers}\n                    />\n                  </div>\n                </div>\n                <div className=\"submit-container\">\n                  <button\n                    onClick={() => this.submitTest()}\n                    className=\"btn btn-danger\"\n                  >\n                    Submit Test\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>\n            {this.state.createTest ? (\n              <CreateTest\n                fetchUserData={this.props.fetchUserData}\n                classroom={this.props.classroom}\n                closeCreateTest={this.closeCreateTest}\n              />\n            ) : (\n              <div>\n                <div>\n                  {\n                    <div className=\"test-strip-container\">\n                      {this.state.allTestTeacher &&\n                        this.state.allTestTeacher.map((value, index) => {\n                          return (\n                            <div\n                              className={`test-strip test-strip-${this.props.classroom.theme}`}\n                            >\n                              <p>{value.name}</p>\n                              <button\n                                className=\"btn btn-success\"\n                                onClick={() => this.viewTestResults(value.id)}\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#testResultModal\"\n                              >\n                                Test Results\n                              </button>\n                            </div>\n                          );\n                        })}\n                      <div\n                        class=\"modal fade\"\n                        id=\"testResultModal\"\n                        tabindex=\"-1\"\n                        aria-labelledby=\"loginModalLabel\"\n                        aria-hidden=\"true\"\n                      >\n                        <div class=\"modal-dialog\">\n                          <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                              <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                                {this.state.testResultName}\n                              </h5>\n                              <button\n                                type=\"button\"\n                                class=\"btn-close\"\n                                data-bs-dismiss=\"modal\"\n                                aria-label=\"Close\"\n                              ></button>\n                            </div>\n                            <div class=\"modal-body\">\n                              <table style={{ width: \"100%\" }}>\n                                <tr className=\"test-result-header-row\">\n                                  <th className=\"test-result-header\">\n                                    Student Email\n                                  </th>\n                                  <th className=\"test-result-header\">Score</th>\n                                  <th className=\"test-result-header\">\n                                    Percentage Score\n                                  </th>\n                                </tr>\n                                {this.state.testResult ? (\n                                  Object.keys(this.state.testResult).map(\n                                    (value, index) => {\n                                      return (\n                                        <tr className=\"test-result-body-row\">\n                                          <td className=\"test-result-body\">\n                                            {value}.com\n                                          </td>\n                                          <td className=\"test-result-body\">\n                                            {this.state.testResult[value]}\n                                          </td>\n                                          <td className=\"test-result-body\">\n                                            {(\n                                              (parseInt(\n                                                this.state.testResult[\n                                                  value\n                                                ].split(\"/\")[0]\n                                              ) *\n                                                100) /\n                                              parseInt(\n                                                this.state.testResult[\n                                                  value\n                                                ].split(\"/\")[1]\n                                              )\n                                            ).toFixed(2)}\n                                            %\n                                          </td>\n                                        </tr>\n                                      );\n                                    }\n                                  )\n                                ) : (\n                                  <></>\n                                )}\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  }\n                </div>\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => this.createNewTest()}\n                >\n                  Create Test\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\allQuestion\\allQuestion.js",[],"C:\\Users\\anush\\OneDrive\\Desktop\\Engage'21_Final\\frontend\\takemytest\\src\\component\\problem\\problem.js",["114","115","116"],"import React from \"react\";\nimport \"./problem.css\";\n\nexport default class Problem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: this.props.questions,\n      currentQuestion: this.props.currentQuestion,\n      currentQuestionAnswer: \"\",\n      answers: {},\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      currentQuestion: props.currentQuestion,\n      questions: props.questions,\n      answers: props.answers,\n    };\n  }\n  reviewQuestion = (questionId) => {\n    this.props.reviewQuestion(questionId, this.state.currentQuestionAnswer);\n  };\n\n  saveQuestion = (questionId) => {\n    this.props.saveQuestion(questionId, this.state.currentQuestionAnswer);\n  };\n  changeAnswer = (answer) => {\n    this.setState({\n      currentQuestionAnswer: answer,\n    });\n  };\n  render() {\n    return Object.keys(this.state.questions).map((value, index) => {\n      if (value == this.state.currentQuestion) {\n        return (\n          <div className=\"problem\">\n            <div>\n              <div className=\"problem-statement\">\n                <p>\n                  <strong>Question No.{index + 1}) </strong>\n                  {this.state.questions[value].statement}\n                </p>\n              </div>\n              <div className=\"options\">\n                {Object.keys(this.state.questions[value].options).map(\n                  (value_, index_) => {\n                    return (\n                      <div class=\"form-check\">\n                        <input\n                          class=\"form-check-input\"\n                          type=\"radio\"\n                          name={`${value}`}\n                          id={`${value}${value_}`}\n                          defaultChecked={\n                            this.state.answers\n                              ? this.state.answers[value] == value_\n                              : false\n                          }\n                          onChange={() => this.changeAnswer(value_)}\n                        />\n                        <label class=\"form-check-label\" for=\"flexRadioDefault1\">\n                          {value_}){\" \"}\n                          {this.state.questions[value].options[value_]}\n                        </label>\n                      </div>\n                    );\n                  }\n                )}\n              </div>\n            </div>\n            <div className=\"actions\">\n              <button\n                className=\"btn btn-warning\"\n                onClick={() => this.reviewQuestion(value)}\n              >\n                Review\n              </button>\n              <button\n                className=\"btn btn-success\"\n                onClick={() => this.saveQuestion(value)}\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        );\n      }\n    });\n  }\n}\n",{"ruleId":"117","severity":1,"message":"118","line":2,"column":8,"nodeType":"119","messageId":"120","endLine":2,"endColumn":12},{"ruleId":"121","severity":1,"message":"122","line":20,"column":20,"nodeType":"123","messageId":"124","endLine":20,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":39,"column":20,"nodeType":"123","messageId":"124","endLine":39,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":74,"column":20,"nodeType":"123","messageId":"124","endLine":74,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":116,"column":11,"nodeType":"127","endLine":116,"endColumn":44},{"ruleId":"125","severity":1,"message":"126","line":119,"column":11,"nodeType":"127","endLine":119,"endColumn":44},{"ruleId":"128","severity":1,"message":"129","line":136,"column":17,"nodeType":"127","endLine":136,"endColumn":73},{"ruleId":"125","severity":1,"message":"126","line":136,"column":17,"nodeType":"127","endLine":136,"endColumn":73},{"ruleId":"117","severity":1,"message":"130","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":6,"column":18,"nodeType":"123","messageId":"124","endLine":6,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":16,"column":25,"nodeType":"123","messageId":"124","endLine":16,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":5,"column":18,"nodeType":"123","messageId":"124","endLine":5,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":15,"column":25,"nodeType":"123","messageId":"124","endLine":15,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":10},{"ruleId":"121","severity":1,"message":"122","line":41,"column":20,"nodeType":"123","messageId":"124","endLine":41,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":67,"column":20,"nodeType":"123","messageId":"124","endLine":67,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":74,"column":20,"nodeType":"123","messageId":"124","endLine":74,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":269,"column":51,"nodeType":"123","messageId":"124","endLine":269,"endColumn":53},{"ruleId":"121","severity":1,"message":"122","line":6,"column":18,"nodeType":"123","messageId":"124","endLine":6,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":16,"column":25,"nodeType":"123","messageId":"124","endLine":16,"endColumn":27},{"ruleId":"117","severity":1,"message":"131","line":6,"column":10,"nodeType":"119","messageId":"120","endLine":6,"endColumn":21},{"ruleId":"121","severity":1,"message":"122","line":72,"column":20,"nodeType":"123","messageId":"124","endLine":72,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":88,"column":20,"nodeType":"123","messageId":"124","endLine":88,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":101,"column":20,"nodeType":"123","messageId":"124","endLine":101,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":104,"column":58,"nodeType":"134","messageId":"135","endLine":104,"endColumn":60},{"ruleId":"121","severity":1,"message":"122","line":130,"column":20,"nodeType":"123","messageId":"124","endLine":130,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":157,"column":63,"nodeType":"134","messageId":"135","endLine":157,"endColumn":65},{"ruleId":"121","severity":1,"message":"122","line":158,"column":47,"nodeType":"123","messageId":"124","endLine":158,"endColumn":49},{"ruleId":"132","severity":1,"message":"136","line":34,"column":65,"nodeType":"134","messageId":"137","endLine":34,"endColumn":67},{"ruleId":"121","severity":1,"message":"122","line":35,"column":17,"nodeType":"123","messageId":"124","endLine":35,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":57,"column":59,"nodeType":"123","messageId":"124","endLine":57,"endColumn":61},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'CreateTest' is defined but never used.","'BACKEND_URL' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd"]